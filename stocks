import pandas as pd
import numpy as np
import datetime
import random
import time
import talib as tl
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import datasets, linear_model
from numpy import random


def initialize(account):
    set_subportfolios([{'cash': 7000000, 'type': 'stock'}, {'cash': 3000000, 'type': 'future'}])
    get_iwencai('沪深300')
    # 设置最大持股数
    account.max_stocks = 10
    account.f = 4799
    account.st = []
    account.sq = []
    account.qihuo = 'IF1809'
    account.num = 0
    account.m = 2  # 设置回测条件


def Distance(x):
    def Dis(y):
        return np.sqrt(sum((x - y) ** 2))  # 欧式距离

    return Dis


def init_k_means(k):
    k_means = {}
    for i in range(k):
        k_means[i] = []
    return k_means


def cal_seed(k_mean):  # 重新计算种子点
    k_mean = np.array(k_mean)
    new_seed = np.mean(k_mean, axis=0)  # 各维度均值
    return new_seed


def K_means(data, seed_k, k_means):
    for i in data:
        f = Distance(i)
        dis = list(map(f, seed_k))  # 某一点距所有种子点的距离
        index = dis.index(min(dis))
        k_means[index].append(i)

    new_seed = []  # 存储新种子
    for i in range(len(seed_k)):
        new_seed.append(cal_seed(k_means[i]))
    new_seed = np.array(new_seed)
    return k_means, new_seed


def run_K_means(data, k):
    seed_k = data[random.randint(len(data), size=k)]  # 随机产生种子点
    k_means = init_k_means(k)  # 初始化每一类
    result = K_means(data, seed_k, k_means)
    count = 0
    while not (result[1] == seed_k).all():  # 种子点改变，继续聚类
        count += 1
        seed_k = result[1]
        k_means = init_k_means(k=5)
        result = K_means(data, seed_k, k_means)
    print('Done')
    # print(result[1])
    print(count)
    plt.figure(figsize=(8, 8))
    Color = 'rbgyckm'
    for i in range(k):
        mydata = np.array(result[0][i])
        plt.scatter(mydata[:, 0], mydata[:, 1], color=Color[i])
    return result[0]


def loadCSV(filename):  # 加载数据，一行行的存入列表  
    dataSet = []
    with open(filename, 'r') as file:
        csvReader = csv.reader(file)
        for line in csvReader:
            dataSet.append(line)
    return dataSet


# 除了标签列，其他列都转换为float类型  
def column_to_float(dataSet):
    featLen = len(dataSet[0]) - 1
    for data in dataSet:
        for column in range(featLen):
            data[column] = float(data[column].strip())

        # 将数据集随机分成N块，方便交叉验证，其中一块是测试集，其他四块是训练集  


def spiltDataSet(dataSet, n_folds):
    fold_size = int(len(dataSet) / n_folds)
    dataSet_copy = list(dataSet)
    dataSet_spilt = []
    for i in range(n_folds):
        fold = []
        while len(fold) < fold_size:  # 这里不能用if，if只是在第一次判断时起作用，while执行循环，直到条件不成立  
            index = randrange(len(dataSet_copy))
            fold.append(dataSet_copy.pop(index))  # pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。  
        dataSet_spilt.append(fold)
    return dataSet_spilt


# 构造数据子集  
def get_subsample(dataSet, ratio):
    subdataSet = []
    lenSubdata = round(len(dataSet) * ratio)  # 返回浮点数  
    while len(subdataSet) < lenSubdata:
        index = randrange(len(dataSet) - 1)
        subdataSet.append(dataSet[index])
        # print len(subdataSet)  
    return subdataSet


# 分割数据集  
def data_spilt(dataSet, index, value):
    left = []
    right = []
    for row in dataSet:
        if row[index] < value:
            left.append(row)
        else:
            right.append(row)
    return left, right


# 计算分割代价  
def spilt_loss(left, right, class_values):
    loss = 0.0
    for class_value in class_values:
        left_size = len(left)
        if left_size != 0:  # 防止除数为零  
            prop = [row[-1] for row in left].count(class_value) / float(left_size)
            loss += (prop * (1.0 - prop))
        right_size = len(right)
        if right_size != 0:
            prop = [row[-1] for row in right].count(class_value) / float(right_size)
            loss += (prop * (1.0 - prop))
    return loss


# 选取任意的n个特征，在这n个特征中，选取分割时的最优特征  
def get_best_spilt(dataSet, n_features):
    features = []
    class_values = list(set(row[-1] for row in dataSet))
    b_index, b_value, b_loss, b_left, b_right = 999, 999, 999, None, None
    while len(features) < n_features:
        index = randrange(len(dataSet[0]) - 1)
        if index not in features:
            features.append(index)
            # print 'features:',features  
    for index in features:  # 找到列的最适合做节点的索引，（损失最小）  
        for row in dataSet:
            left, right = data_spilt(dataSet, index, row[index])  # 以它为节点的，左右分支  
            loss = spilt_loss(left, right, class_values)
            if loss < b_loss:  # 寻找最小分割代价  
                b_index, b_value, b_loss, b_left, b_right = index, row[index], loss, left, right
                # print b_loss  
    # print type(b_index)  
    return {'index': b_index, 'value': b_value, 'left': b_left, 'right': b_right}


# 决定输出标签  
def decide_label(data):
    output = [row[-1] for row in data]
    return max(set(output), key=output.count)


def handle_data(account, data):
    account.f = account.f + 1
    if (account.f % 4800 == 0):
        analyse(account, data)
    if (account.f % 240 == 0):
        account.signal = stock_to_signals(account, data)
        if (account.signal >= 1):
            if (account.num):
                order(account.qihuo, -account.num, type='long', pindex=1)
                account.num = 0
        if (account.signal <= -1):
            if (account.num):
                order(account.qihuo, -account.num, type='long', pindex=1)
                account.num = 0
            hedging(account, data)
            code = get_future_code('IF', 'far_season')
            price = data.attribute_history(code, ['close'], 2, '1d')
            N = int(7000000 * sum(account.sq) / (price['close'][-1] * 300 * 10))
            account.num = N
            account.qihuo = code
            order(code, N, type='short', pindex=1)


def hedging(account, data):
    account.sq = []
    for security in account.st:
        price2 = data.attribute_history(security, ['close'], 50, '5d')
        price = data.attribute_history('000001.SH', ['close'], 50, '5d')
        if (len(price2) == 50):
            c1 = []
            c2 = []
            for i in range(49):
                cx1 = []
                cx2 = []
                temp = (price['close'][i + 1] - price['close'][i]) / price['close'][i]
                temp2 = (price2['close'][i + 1] - price2['close'][i]) / price2['close'][i]
                cx1.append(temp)
                cx2.append(temp2)
                c1.append(cx1)
                c2.append(cx2)
                clf = linear_model.LinearRegression()
            reg = LinearRegression().fit(c1, c2)
            account.sq.append(reg.coef_[0][0])


# 特征缩放
def featureNormalize(X):
    X_norm = X;
    mu = np.zeros((1, X.shape[1]))
    sigma = np.zeros((1, X.shape[1]))
    for i in range(X.shape[1]):
        mu[0, i] = np.mean(X[:, i])  # 均值
        sigma[0, i] = np.std(X[:, i])  # 标准差
    # print(mu)
    #     print(sigma)
    X_norm = (X - mu) / sigma
    return X_norm, mu, sigma


# 计算损失
def computeCost(X, y, theta):
    m = y.shape[0]
    #     J = (np.sum((X.dot(theta) - y)**2)) / (2*m)
    C = X.dot(theta) - y
    J2 = (C.T.dot(C)) / (2 * m)
    return J2


# 梯度下降
def gradientDescent(X, y, theta, alpha, num_iters):
    m = y.shape[0]
    # print(m)
    # 存储历史误差
    J_history = np.zeros((num_iters, 1))
    for iter in range(num_iters):
        # 对J求导，得到 alpha/m * (WX - Y)*x(i)， (3,m)*(m,1)  X (m,3)*(3,1) = (m,1)
        theta = theta - (alpha / (m + 0.1)) * (X.T.dot(X.dot(theta) - y))
        J_history[iter] = computeCost(X, y, theta)
    return J_history, theta


def analyse(account, data):
    # 每个调仓日先清仓持有的股票
    for security in list(account.positions):
        order_target(security, 0)

    account.m = account.m + 1

    # 首先获得当前日期
    # time = get_datetime()
    # date = time.strftime('%Y%m%d')
    # trade_days = get_trade_days(date,date).strftime('%Y-%m-%d')
    # log.info(trade_days)

    t = (2018, account.m, 1, 17, 3, 38, 1, 48, 0)
    t = time.mktime(t)
    k1 = time.strftime('%Y-%m-%d', time.gmtime(t))
    k2 = time.strftime('%Y%m%d', time.gmtime(t))
    date = []
    date.append(k2)
    trade_days = []
    trade_days.append(k1)

    # 获得股票序列
    sample = account.iwencai_securities
    df = {'security': [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 'score': []}

    total2 = []
    total = []
    # 因子选择共6个因子
    for security in sample:
        value = get_price([security], '20170103 14:27', '20170103 14:31', '1m', ['close', 'open', 'low', 'high'])
        value2 = get_price([security], '20180103 14:27', '20180103 14:31', '1m', ['close', 'open', 'low', 'high'])
        if (not value[security].empty):
            if (not value2[security].empty):
                x1 = value[security].iat[0, 0]
                x2 = value2[security].iat[0, 0]
                x3 = (x2 - x1) / x1
            else:
                x3 = 0
        else:
            x3 = 0
        # log.info(x3)

        q = query(
            profit.weighted_roe,
            valuation.market_cap,
            growth_one_season.net_profit_growth_ratio,
            valuation.pe_ttm,
        ).filter(
            profit.symbol == security
        )
        p = query(
            factor.date,
            factor.dividend_rate_12_months,
            factor.mtm
        ).filter(
            factor.symbol == security,
            factor.date.in_(trade_days)
        )

        # 获得因子数据
        dq = get_factors(p)
        fdmt = get_fundamentals(q, date=date).fillna(0)

        # 因子填充
        if (not (fdmt['profit_weighted_roe'].empty or
                 fdmt['valuation_market_cap'].empty or
                 fdmt['growth_one_season_net_profit_growth_ratio'].empty or
                 fdmt['valuation_pe_ttm'].empty or
                 dq['factor_mtm'].empty or
                 dq['factor_dividend_rate_12_months'].empty)):
            # 计算并填充因子值
            df['security'].append(security)
            df[1].append(fdmt['profit_weighted_roe'][0])
            df[2].append(fdmt['valuation_market_cap'][0])
            df[3].append(fdmt['growth_one_season_net_profit_growth_ratio'][0])
            df[4].append(fdmt['valuation_pe_ttm'][0])
            df[5].append(dq['factor_mtm'][0])
            df[6].append(dq['factor_dividend_rate_12_months'][0])
            if (not x3 == 0):
                current = []
                current2 = []
                current.append(fdmt['profit_weighted_roe'][0])
                current.append(fdmt['valuation_market_cap'][0])
                current.append(fdmt['growth_one_season_net_profit_growth_ratio'][0])
                current.append(fdmt['valuation_pe_ttm'][0])
                current.append(dq['factor_mtm'][0])
                current.append(dq['factor_dividend_rate_12_months'][0])
                current2.append(x3)
                total.append(current)
                total2.append(current2)
    theta = np.zeros((7, 1))
    flag = 1
    total = np.array(total, np.float64)
    total2 = np.array(total2, np.float64)
    iterations = 10000  # 迭代次数
    alpha = 0.01  # 学习率
    # x = total[:,(0,1,2,3,4,5)].reshape((-1, 6))
    # y = total[:,6].reshape((-1, 1))
    x = total.reshape((-1, 6))
    y = total2.reshape((-1, 1))
    m = y.shape[0]
    x, mu, sigma = featureNormalize(x)
    X = np.hstack([x, np.ones((x.shape[0], 1))])
    j = computeCost(X, y, theta)
    J_history, theta = gradientDescent(X, y, theta, alpha, iterations)
    log.info(theta)

    for i in range(1, 7):
        # 因子极值处理，中位数去极值法
        m = np.mean(df[i])
        s = np.std(df[i])
        for j in range(len(df[i])):
            if df[i][j] <= m - 3 * s:
                df[i][j] = m - 3 * s
            if df[i][j] >= m + 3 * s:
                df[i][j] = m + 3 * s
        m = np.mean(df[i])
        s = np.std(df[i])

        # 因子无量纲处理，标准化法
        for j in range(len(df[i])):
            df[i][j] = (df[i][j] - m) / s

    # 计算综合因子得分
    for i in range(len(df['security'])):
        # 等权重计算(注意因子方向)
        s = (theta[0] * df[1][i] + theta[1] * df[2][i] + theta[2] * df[3][i] + theta[3] * df[4][i] + theta[4] * df[5][
            i] + theta[5] * df[6][i])
        df['score'].append(s)

    # 按综合因子得分由大到小排序
    df = pd.DataFrame(df).sort_values(by='score', ascending=False)
    # 等权重分配资金

    cash = account.cash / account.max_stocks
    account.st = []
    # 买入新调仓股票
    for security in df[:account.max_stocks]['security']:
        order_target_value(security, cash)
        account.st.append(security)


# 获得因子数据
def get_data(account, data):
    for security in list(account.positions):
        order_target(security, 0)
    t = (2018, account.m, 1, 17, 3, 38, 1, 48, 0)
    t = time.mktime(t)
    k1 = time.strftime('%Y-%m-%d', time.gmtime(t))
    k2 = time.strftime('%Y%m%d', time.gmtime(t))
    date = []
    date.append(k2)
    trade_days = []
    trade_days.append(k1)

    # 获得股票序列
    sample = account.iwencai_securities
    df = {'security': [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [],
          11: [], 12: [], 13: [], 14: [], 15: [], 16: [], 17: [], 18: [], 19: [], 20: [],
          21: [], 22: [], 23: [], 24: [], 25: [], 26: [], 27: [], 28: [], 29: [], 30: [],
          31: [], 32: [], 33: [], 34: [], 35: [], 36: [], 37: [], 38: [], 39: [], 40: [],
          41: [], 42: [], 43: [], 44: [], 45: [], 46: [], 47: [], 48: [], 49: [], 50: [],
          51: [], 52: [], 53: [], 54: [], 55: [], 56: [], 57: [], 58: [], 59: [], 60: [],
          61: [], 62: [], 63: [], 64: [], 65: [], 66: [], 67: [], 68: [], 69: [], 70: [],
          71: [], 72: [], 73: [], 74: [], 75: [], 76: [], 77: [], 78: [], 79: [], 80: [],
          81: [], 82: [], 83: [], 84: [], 85: [], 86: [], 87: [], 88: [], 89: [], 90: [],
          91: [], 92: [], 93: [], 94: [], 95: [], 96: [], 97: [], 98: [], 99: [], 100: [],
          101: [], 102: [], 103: [], 104: [], 105: [], 106: [], 107: [], 108: [], 109: [], 110: [],
          111: [], 112: [], 113: [], 114: [], 115: [], 116: [], 'score': []}

    total2 = []
    total = []
    # 因子选择共6个因子
    for security in sample:
        p = query(
            factor.date,
            factor.bbi,
            factor.dma,
            factor.ma,
            factor.expma,
            factor.macd,
            factor.mtm,
            factor.priceosc,
            factor.trix,
            factor.ddi,
            factor.bias,
            factor.cci,
            factor.dbcd,
            factor.dpo,
            factor.kdj,
            factor.lwr,
            factor.roc,
            factor.rsi,
            factor.si,
            factor.srdm,
            factor.vroc,
            factor.vrsi,
            factor.wr,
            factor.arbr,
            factor.cr,
            factor.psy,
            factor.vr_rate,
            factor.wad,
            factor.mfi,
            factor.obv,
            factor.pvt,
            factor.wvad,
            factor.bbiboll,
            factor.boll,
            factor.cdp,
            factor.env,
            factor.mike,
            factor.vr,
            factor.vma,
            factor.vmacd,
            factor.vosc,
            factor.tapi,
            factor.vstd,
            factor.adtm,
            factor.mi,
            factor.micd,
            factor.rc,
            factor.rccd,
            factor.srmi,
            factor.dptb,
            factor.jdqs,
            factor.jdrs,
            factor.zdzb,
            factor.atr,
            factor.mass,
            factor.std,
            factor.vhf,
            factor.cvlt,
            factor.up_n,
            factor.down_n,
            factor.pe,
            factor.pe_ttm,
            factor.pb,
            factor.pcf_cash_flow_ttm,
            factor.ps,
            factor.ps_ttm,
            factor.dividend_rate,
            factor.dividend_rate_12_months,
            factor.market_cap,
            factor.capitalization,
            factor.current_market_cap,
            factor.circulating_cap,
            factor.weighted_roe,
            factor.overall_assets_net_income_ratio,
            factor.roa,
            factor.net_profit_margin_on_sales,
            factor.gross_sales_profits,
            factor.ratio_of_sales_to_cost,
            factor.net_profit_div_income,
            factor.opt_profit_div_income,
            factor.before_tax_profit_div_income,
            factor.opt_cost_div_income,
            factor.sale_cost_div_income,
            factor.administration_cost_div_income,
            factor.financing_cost_div_income,
            factor.impairment_loss_div_income,
            factor.overall_income_growth_ratio,
            factor.opt_income_growth_ratio,
            factor.total_profit_growth_ratio,
            factor.net_profit_growth_ratio,
            factor.parent_company_profit_growth_ratio,
            factor.net_cashflow_from_opt_act_growth_ratio,
            factor.diluted_net_asset_growth_ratio,
            factor.cash_cycle,
            factor.days_sales_of_inventory,
            factor.days_sales_outstanding,
            factor.days_payable_outstanding,
            factor.turnover_days_of_current_assets,
            factor.inventory_turnover_ratio,
            factor.turnover_ratio_of_receivable,
            factor.turnover_ratio_of_account_payable,
            factor.turnover_of_current_assets,
            factor.turnover_of_fixed_assets,
            factor.turnover_of_overall_assets,
            factor.current_ratio,
            factor.quick_ratio,
            factor.conservative_quick_ratio,
            factor.equity_ratio,
            factor.tangible_assets_liabilities,
            factor.tangible_assets_int_liabilities,
            factor.tangible_assets_net_liabilities,
            factor.netcashflows_from_opt_act_int_liabilities,
            factor.netcashflows_from_opt_act_net_liabilities,
            factor.long_term_debt_to_opt_capital_ratio,
            factor.net_debt_equity,
            factor.int_debt_equity,
        ).filter(
            factor.symbol == security,
            factor.date.in_(trade_days)
        )

        # 获得因子数据
        dq = get_factors(p)
        # 因子填充
        if (1):
            current = []
            current2 = []
            current.append(dq['factor_mtm'][0])
            current.append(dq['factor_dividend_rate_12_months'][0])
            current.append(dq['factor_bbi'][0])
            current.append(dq['factor_dma'][0])
            current.append(dq['factor_ma'][0])
            current.append(dq['factor_expma'][0])
            current.append(dq['factor_macd'][0])
            current.append(dq['factor_mtm'][0])
            current.append(dq['factor_priceosc'][0])
            current.append(dq['factor_trix'][0])
            current.append(dq['factor_ddi'][0])
            current.append(dq['factor_bias'][0])
            current.append(dq['factor_cci'][0])
            current.append(dq['factor_dbcd'][0])
            current.append(dq['factor_dpo'][0])
            current.append(dq['factor_kdj'][0])
            current.append(dq['factor_lwr'][0])
            current.append(dq['factor_roc'][0])
            current.append(dq['factor_rsi'][0])
            current.append(dq['factor_si'][0])
            current.append(dq['factor_srdm'][0])
            current.append(dq['factor_vroc'][0])
            current.append(dq['factor_vrsi'][0])
            current.append(dq['factor_wr'][0])
            current.append(dq['factor_arbr'][0])
            current.append(dq['factor_cr'][0])
            current.append(dq['factor_psy'][0])
            current.append(dq['factor_vr_rate'][0])
            current.append(dq['factor_wad'][0])
            current.append(dq['factor_mfi'][0])
            current.append(dq['factor_obv'][0])
            current.append(dq['factor_pvt'][0])
            current.append(dq['factor_wvad'][0])
            current.append(dq['factor_bbiboll'][0])
            current.append(dq['factor_boll'][0])
            current.append(dq['factor_cdp'][0])
            current.append(dq['factor_env'][0])
            current.append(dq['factor_mike'][0])
            current.append(dq['factor_vr'][0])
            current.append(dq['factor_vma'][0])
            current.append(dq['factor_vmacd'][0])
            current.append(dq['factor_vosc'][0])
            current.append(dq['factor_tapi'][0])
            current.append(dq['factor_vstd'][0])
            current.append(dq['factor_adtm'][0])
            current.append(dq['factor_mi'][0])
            current.append(dq['factor_micd'][0])
            current.append(dq['factor_rc'][0])
            current.append(dq['factor_rccd'][0])
            current.append(dq['factor_srmi'][0])
            current.append(dq['factor_dptb'][0])
            current.append(dq['factor_jdqs'][0])
            current.append(dq['factor_jdrs'][0])
            current.append(dq['factor_zdzb'][0])
            current.append(dq['factor_atr'][0])
            current.append(dq['factor_mass'][0])
            current.append(dq['factor_std'][0])
            current.append(dq['factor_vhf'][0])
            current.append(dq['factor_cvlt'][0])
            current.append(dq['factor_up_n'][0])
            current.append(dq['factor_down_n'][0])
            current.append(dq['factor_pe'][0])
            current.append(dq['factor_pe_ttm'][0])
            current.append(dq['factor_pb'][0])
            current.append(dq['factor_pcf_cash_flow_ttm'][0])
            current.append(dq['factor_ps'][0])
            current.append(dq['factor_ps_ttm'][0])
            current.append(dq['factor_dividend_rate'][0])
            current.append(dq['factor_dividend_rate_12_months'][0])
            current.append(dq['factor_market_cap'][0])
            current.append(dq['factor_capitalization'][0])
            current.append(dq['factor_current_market_cap'][0])
            current.append(dq['factor_circulating_cap'][0])
            current.append(dq['factor_weighted_roe'][0])
            current.append(dq['factor_overall_assets_net_income_ratio'][0])
            current.append(dq['factor_roa'][0])
            current.append(dq['factor_net_profit_margin_on_sales'][0])
            current.append(dq['factor_gross_sales_profits'][0])
            current.append(dq['factor_ratio_of_sales_to_cost'][0])
            current.append(dq['factor_net_profit_div_income'][0])
            current.append(dq['factor_opt_profit_div_income'][0])
            current.append(dq['factor_before_tax_profit_div_income'][0])
            current.append(dq['factor_opt_cost_div_income'][0])
            current.append(dq['factor_sale_cost_div_income'][0])
            current.append(dq['factor_administration_cost_div_income'][0])
            current.append(dq['factor_financing_cost_div_income'][0])
            current.append(dq['factor_impairment_loss_div_income'][0])
            current.append(dq['factor_overall_income_growth_ratio'][0])
            current.append(dq['factor_opt_income_growth_ratio'][0])
            current.append(dq['factor_total_profit_growth_ratio'][0])
            current.append(dq['factor_net_profit_growth_ratio'][0])
            current.append(dq['factor_parent_company_profit_growth_ratio'][0])
            current.append(dq['factor_net_cashflow_from_opt_act_growth_ratio'][0])
            current.append(dq['factor_diluted_net_asset_growth_ratio'][0])
            current.append(dq['factor_cash_cycle'][0])
            current.append(dq['factor_days_sales_of_inventory'][0])
            current.append(dq['factor_days_sales_outstanding'][0])
            current.append(dq['factor_days_payable_outstanding'][0])
            current.append(dq['factor_turnover_days_of_current_assets'][0])
            current.append(dq['factor_inventory_turnover_ratio'][0])
            current.append(dq['factor_turnover_ratio_of_receivable'][0])
            current.append(dq['factor_turnover_ratio_of_account_payable'][0])
            current.append(dq['factor_turnover_of_current_assets'][0])
            current.append(dq['factor_turnover_of_fixed_assets'][0])
            current.append(dq['factor_turnover_of_overall_assets'][0])
            current.append(dq['factor_current_ratio'][0])
            current.append(dq['factor_quick_ratio'][0])
            current.append(dq['factor_conservative_quick_ratio'][0])
            current.append(dq['factor_equity_ratio'][0])
            current.append(dq['factor_tangible_assets_liabilities'][0])
            current.append(dq['factor_tangible_assets_int_liabilities'][0])
            current.append(dq['factor_tangible_assets_net_liabilities'][0])
            current.append(dq['factor_netcashflows_from_opt_act_int_liabilities'][0])
            current.append(dq['factor_netcashflows_from_opt_act_net_liabilities'][0])
            current.append(dq['factor_long_term_debt_to_opt_capital_ratio'][0])
            current.append(dq['factor_net_debt_equity'][0])
            current.append(dq['factor_int_debt_equity'][0])
            total.append(current)
